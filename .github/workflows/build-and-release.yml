name: Build and release
on:
  push:
    branches:
      - master
      - dev
      - ci_tests
      - dennwc
    tags:
      - '*'
  pull_request:
    branches:
      - master
      - dev


env:
  DOCKER_IMAGE_NAME: ghcr.io/noxworld-dev/opennox

jobs:
  hybrid_docker_mingw:
    name: Cross compile Windows binaries with mingw on ArchLinux-based Linux environment
    runs-on: 'ubuntu-20.04'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true
          
      - name: Get go cache
        uses: actions/cache@v3
        with:
          path: gocache
          key: mingw-gocache-v1
          
      - uses: docker://ghcr.io/noxworld-dev/docker-build:latest-win
        name: Docker build
      
      - uses: actions/upload-artifact@v3
        name: Upload artifacts
        with:
          name: hybrid_docker_mingw_artifacts
          path: build



  snapcraft_linux:
    name: Go build for Snapcraft
    runs-on: 'ubuntu-20.04'
    if: startsWith(github.ref, 'refs/tags/v') || (github.ref == 'refs/heads/dev')
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true
      - name: 'Build Snap package'
        uses: snapcore/action-build@v1
        id: snapcraft
#      - name: 'Upload the package'
#        uses: actions/upload-artifact@v2
#        with:
#          name: opennox-snap
#          path: ${{ steps.snapcraft.outputs.snap }}
      - name: 'Publish to edge channel'
        uses: snapcore/action-publish@v1
        if: github.ref == 'refs/heads/dev'
        with:
          store_login: ${{ secrets.SNAPSTORE_LOGIN }}
          snap: ${{ steps.snapcraft.outputs.snap }}
          release: edge
      - name: 'Publish to stable channel'
        uses: snapcore/action-publish@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          store_login: ${{ secrets.SNAPSTORE_LOGIN }}
          snap: ${{ steps.snapcraft.outputs.snap }}
          release: stable

  hybrid_linux:
    name: Build on Linux Host
    runs-on: 'ubuntu-20.04'
    if: ${{ false }} # Disable for now
    strategy:
      fail-fast: true

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true

      - uses: actions/setup-go@v2
        with:
          go-version: '1.18.x'

      - name: Check Go version
        run: go version

      - name: Install C dependencies
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update -m
          sudo apt-get install -y build-essential ccache gcc gcc-multilib libsdl2-dev libsdl2-dev:i386 libopenal-dev:i386 libsdl2-2.0-0:i386 libopenal1:i386

      - name: Check GCC version
        run: gcc -v

      - name: Install Go dependencies
        run: cd ./src && go mod download

      - name: Go build
        run: cd ./src && go run ./internal/noxbuild

      - name: Prepare the binaries
        run: |
          cp ./src/opennox /tmp/opennox
          cp ./src/opennox-hd /tmp/opennox-hd
          cp ./src/opennox-server /tmp/opennox-server
          tar -czf /tmp/opennox-linux.tar.gz /tmp/opennox /tmp/opennox-hd /tmp/opennox-server

      - name: Upload the binary
        uses: actions/upload-artifact@v2
        if: startsWith(github.ref, 'refs/tags/') || (github.ref == 'refs/heads/dev') || (github.ref == 'refs/heads/ci_tests')
        with:
          name: opennox-linux
          path: /tmp/opennox-linux.tar.gz
          if-no-files-found: error
          retention-days: 1

  docker_server:
    name: Docker server build
    runs-on: 'ubuntu-20.04'
    if: startsWith(github.ref, 'refs/tags/') || (github.ref == 'refs/heads/dev') || (github.ref == 'refs/heads/ci_tests')
    needs: [hybrid_linux]
    strategy:
      fail-fast: true

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true

      - uses: actions/download-artifact@v2
        with:
          name: opennox-linux
          path: ~/Downloads/

      - name: Extract server binary
        run: |
          rm -rf /tmp/linux-tmp
          mkdir -p /tmp/linux-tmp
          tar -xvzf ~/Downloads/opennox-linux.tar.gz -C /tmp/linux-tmp/
          cp /tmp/linux-tmp/tmp/opennox-server ./docker/opennox-server/opennox-server
          rm -rf /tmp/linux-tmp

      - name: Docker build
        run: |
          cd ./docker/opennox-server
          docker build -t $DOCKER_IMAGE_NAME:tmp .

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        if: startsWith(github.ref, 'refs/tags/') || (github.ref == 'refs/heads/dev')
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push latest
        if: github.ref == 'refs/heads/dev'
        run: |
          docker tag $DOCKER_IMAGE_NAME:tmp $DOCKER_IMAGE_NAME:dev
          docker push $DOCKER_IMAGE_NAME:dev

      - name: Push tagged
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          export VERSION=$(git name-rev --tags --name-only $(git rev-parse HEAD))
          docker tag $DOCKER_IMAGE_NAME:tmp $DOCKER_IMAGE_NAME:$VERSION
          docker push $DOCKER_IMAGE_NAME:$VERSION

      - name: Push latest
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          docker tag $DOCKER_IMAGE_NAME:tmp $DOCKER_IMAGE_NAME:latest
          docker push $DOCKER_IMAGE_NAME:latest

  hybrid_linux_mingw:
    name: Win build on Linux Host
    runs-on: 'ubuntu-20.04'
    if: ${{ false }} # Disable for now
    strategy:
      fail-fast: true

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true

      - uses: actions/setup-go@v2
        with:
          go-version: '1.18.x'

      - name: Check Go version
        run: go version

      - name: Install C dependencies
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update -m
          sudo apt-get install -y build-essential curl rsync zip unzip ccache gcc gcc-multilib gcc-mingw-w64 libsdl2-dev libsdl2-dev:i386 libopenal-dev:i386 libsdl2-2.0-0:i386 libopenal1:i386

      - name: Check GCC version
        run: gcc -v

      - name: Install SDL MinGW package
        run: |
          cd /tmp
          curl -so /tmp/sdl2.tar.gz https://www.libsdl.org/release/SDL2-devel-2.0.14-mingw.tar.gz
          tar -xzf /tmp/sdl2.tar.gz
          sudo rsync -r /tmp/SDL2-2.0.14/i686-w64-mingw32/include/ /usr/i686-w64-mingw32/include/
          sudo rsync -r /tmp/SDL2-2.0.14/i686-w64-mingw32/lib/ /usr/i686-w64-mingw32/lib/
          echo "405eaff3eb18f2e08fe669ef9e63bc9a8710b7d343756f238619761e9b60407d /tmp/sdl2.tar.gz" > /tmp/checksum.txt
          sha256sum -c /tmp/checksum.txt

      - name: Install OpenAL package
        run: |
          cd /tmp
          curl -so /tmp/openal.zip https://openal-soft.org/openal-binaries/openal-soft-1.21.1-bin.zip
          unzip -o /tmp/openal.zip
          sudo rsync -r /tmp/openal-soft-1.21.1-bin/include/ /usr/i686-w64-mingw32/include/
          sudo rsync -r /tmp/openal-soft-1.21.1-bin/libs/Win32/ /usr/i686-w64-mingw32/lib/
          sudo ln -fs ./libOpenAL32.dll.a /usr/i686-w64-mingw32/lib/libOpenAL.dll.a
          echo "2e4b005c4f8057adcf4459d9b239d3fe745a9128079b2a091f899550f2d931b0 /tmp/openal.zip" > /tmp/checksum.txt
          sha256sum -c /tmp/checksum.txt

      - name: Install Go dependencies
        run: cd ./src && go mod download

      - name: Go build
        run: cd ./src && go run ./internal/noxbuild -os=windows

      - name: Prepare the binary
        run: |
          cp ./src/opennox.exe /tmp/opennox.exe
          cp ./src/opennox-hd.exe /tmp/opennox-hd.exe
          cp ./src/opennox-server.exe /tmp/opennox-server.exe

      - name: Upload the binary
        uses: actions/upload-artifact@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: opennox-win
          path: |
            /tmp/opennox.exe
            /tmp/opennox-hd.exe
            /tmp/opennox-server.exe
          if-no-files-found: error
          retention-days: 1

  release_repackage_linux:
    name: Repackage Linux release
    runs-on: 'ubuntu-20.04'
    if: startsWith(github.ref, 'refs/tags/')
    needs: [hybrid_linux]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true

      - name: Cleanup
        run: |
          rm -rf /tmp/linux-tmp
          mkdir -p /tmp/linux-tmp

      - uses: actions/download-artifact@v2
        with:
          name: opennox-linux
          path: /tmp/linux-tmp/

      - name: Repackage release
        run: |
          tar -xvzf /tmp/linux-tmp/opennox-linux.tar.gz -C /tmp/linux-tmp/

          rm -rf /tmp/opennox-linux
          mkdir -p /tmp/opennox-linux
          cp /tmp/linux-tmp/tmp/* /tmp/opennox-linux
          cp ./CHANGELOG.md /tmp/opennox-linux

          mkdir /tmp/opennox-linux/docs
          cp ./docs/game-*.md /tmp/opennox-linux/docs/
          cp ./docs/server-*.md /tmp/opennox-linux/docs/
          cp ./docs/mod-*.md /tmp/opennox-linux/docs/
          cp ./docs/maps-*.md /tmp/opennox-linux/docs/
          cp ./docs/*-sample.yml /tmp/opennox-linux/docs/

          export VERSION=$(git name-rev --tags --name-only $(git rev-parse HEAD))
          cd /tmp/opennox-linux
          rm -rf /tmp/opennox-linux-release
          mkdir -p /tmp/opennox-linux-release
          tar -czf /tmp/opennox-linux-release/OpenNox-linux-$VERSION.tar.gz ./*

      - name: Upload the archive
        uses: actions/upload-artifact@v2
        with:
          name: opennox-release-linux
          path: /tmp/opennox-linux-release/OpenNox-linux-*.tar.gz
          if-no-files-found: error

  release_repackage_win:
      name: Repackage Windows release
      runs-on: 'ubuntu-20.04'
      if: startsWith(github.ref, 'refs/tags/')
      needs: [hybrid_linux_mingw]
      steps:
        - name: Install NSIS
          run: sudo apt-get install -y nsis

        - uses: actions/checkout@v2
          with:
            fetch-depth: 0
            submodules: true

        - name: Cleanup
          run: |
            rm -rf /tmp/win-tmp
            mkdir -p /tmp/win-tmp

        - uses: actions/download-artifact@v2
          with:
            name: nox-win # needed for SDL and OpenAL DLLs
            path: /tmp/win-tmp/deps/

        - uses: actions/download-artifact@v2
          with:
            name: opennox-win
            path: /tmp/win-tmp/opennox/

        - name: Repackage release
          run: |
            rm -rf /tmp/opennox-win
            mkdir -p /tmp/opennox-win
            ls -la /tmp/win-tmp/deps/
            cp /tmp/win-tmp/deps/*.dll /tmp/opennox-win/
            mv /tmp/opennox-win/OpenAL32.dll /tmp/opennox-win/libopenal-1.dll
            ls -la /tmp/win-tmp/opennox/
            cp /tmp/win-tmp/opennox/*.exe /tmp/opennox-win/
            cp ./CHANGELOG.md /tmp/opennox-win/

            mkdir /tmp/opennox-win/docs
            cp ./docs/game-*.md /tmp/opennox-win/docs/
            cp ./docs/server-*.md /tmp/opennox-win/docs/
            cp ./docs/mod-*.md /tmp/opennox-win/docs/
            cp ./docs/maps-*.md /tmp/opennox-win/docs/
            cp ./docs/*-sample.yml /tmp/opennox-win/docs/

            rm -rf /tmp/opennox-win-release
            mkdir -p /tmp/opennox-win-release
            export VERSION=$(git name-rev --tags --name-only $(git rev-parse HEAD))
            makensis -DVERSION="$VERSION" -DDATA="/tmp/opennox-win/" -DOUTDIR="/tmp/opennox-win-release/" ./scripts/opennox.nsi

            cd /tmp/opennox-win
            zip -9 -r /tmp/opennox-win-release/OpenNox-$VERSION.zip ./*

        - name: Upload the archive
          uses: actions/upload-artifact@v2
          with:
            name: opennox-release-win
            path: |
              /tmp/opennox-win-release/OpenNox-*.zip
              /tmp/opennox-win-release/OpenNox-*.exe
            if-no-files-found: error

  github_release:
    name: Github release
    runs-on: 'ubuntu-20.04'
    if: startsWith(github.ref, 'refs/tags/')
    needs: [release_repackage_linux, release_repackage_win]
    steps:
      - name: Cleanup
        run: |
          rm -rf /tmp/release-tmp
          mkdir -p /tmp/release-tmp

      - uses: actions/download-artifact@v2
        with:
          name: opennox-release-linux
          path: /tmp/release-tmp/

      - uses: actions/download-artifact@v2
        with:
          name: opennox-release-win
          path: /tmp/release-tmp/

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            TODO: changelog
          draft: true
          fail_on_unmatched_files: true
          files: |
            /tmp/release-tmp/OpenNox-linux-*.tar.gz
            /tmp/release-tmp/OpenNox-*.zip
            /tmp/release-tmp/OpenNox-*.exe
